# -*- coding: utf-8 -*-
"""Prototype d'Extracteur de Caractéristiques de Documents Juridiques

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14kJNw71kz_z1fQTy3ibLzz952YhS9_-3
"""

!pip install pytesseract

!pip install ArabicOcr

!pip install tesseract

!apt install tesseract-ocr
!apt install libtesseract-dev
!apt install tesseract-ocr-ara

"""**Les bibliothèques nécessaires**"""

from ArabicOcr import arabicocr
import pytesseract
from pytesseract import Output
from PIL import Image ,ImageOps ,ImageFilter , ImageDraw
import cv2
import nltk
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
import string
from pytesseract import get_tesseract_version
import os
import re

"""**Prétraitement de l'image texte en gras**"""

image1 = Image.open('image 1.jpg')

if image1 is None:
    print("Impossible de charger l'image.")
else:
  print("true")

image1

# Conversion en niveaux de gris
imageGris = image1.convert("L")
imageGris

# Appliquer un filtre de lissage moyen pour atténuer le bruit
image_sans_bruit = imageGris.filter(ImageFilter.MedianFilter(size=3))
image_sans_bruit

##Installation of training data for Arabic language
# Check Tesseract version installed
print("Version de Tesseract installée:", get_tesseract_version())

# Specify the directory where to store Tesseract training data
tessdata_dir_config = '--tessdata-dir "/chemin/vers/tessdata"'

# Download and install training data for Arabic language
os.system(f"wget -P /chemin/vers/tessdata https://github.com/tesseract-ocr/tessdata/raw/main/ara.traineddata")
os.system(f"mv /chemin/vers/tessdata/ara.traineddata /chemin/vers/tessdata/ara.traineddata")

# Check if training data has been installed correctly
if os.path.exists("/chemin/vers/tessdata/ara.traineddata"):
    print("Données de formation pour la langue arabe installées avec succès.")
else:
    print("Erreur lors de l'installation des données de formation pour la langue arabe.")

"""**Extraction du texte**"""

texte = pytesseract.image_to_string(image_sans_bruit, lang='ara')
texte

"""**Traitement du text**"""

# Load stopwords in Arabic
stop_words = set(stopwords.words('arabic'))

# Tokenize the text into sentences
sentences = sent_tokenize(texte)

# Define a function to preprocess each sentence
def preprocess(sentence):
  # Tokenize the sentence into words
  words= nltk.word_tokenize(sentence)

  # Remove stopwords and punctuation
  words_filtered = [word.lower() for word in words if word.lower() not in stop_words and word not in string.punctuation]

  return words

# Preprocess each sentence in the text
T_clean = [preprocess(sentence) for sentence in sentences]
T_clean

print("Contenu de T_clean :", T_clean)

txt = ""

for e in T_clean:
    txt += " ".join(e) + " "

print(txt)

"""**Extraction de caracteristiques**"""

def extraire_caracteristiques(texte):
    # Initialize dictionaries to store extracted features
    caractéristiques = {
        "Type de Document": [],
        "Dates": [],
        "Parties Impliquées": [],
        "Termes Clés": [],
        "Éléments d'Action": [],
        "Les sujet": []
    }

    # Regex templates for each feature
    motifs = {
        "Type de Document": r"Type\s+de\s+Document\s*:\s*(.+)",
        "Dates": r"Dates\s*:\s*(.+)",
        "Parties Impliquées": r"Parties\s+Impliquées\s*:\s*(.+)",
        "Termes Clés": r"Termes\s+Clés\s*:\s*(.+)",
        "Éléments d'Action": r"Éléments\s+d'Action\s*:\s*(.+)",
        "Les sujet": r"Les\s+sujet\s*:\s*(.+)"
    }

   # Browse each feature and extract matches
    for caractéristique, motif in motifs.items():
        correspondances = re.findall(motif, texte, re.IGNORECASE)
        if correspondances:
            caractéristiques[caractéristique] = [c.strip() for c in correspondances]

    return caractéristiques



# Extract Sample Text Features
caractéristiques_extraites = extraire_caracteristiques(txt)

# Display the extracted features
for caractéristique, valeurs in caractéristiques_extraites.items():
    print(caractéristique + ":")
    for valeur in valeurs:
        print("-", valeur)

"""**Interface en ligne de commande**"""

def main():

    print("Bienvenue dans l'outil d'extraction de texte !")
    chemin_document = input("Veuillez entrer le chemin vers le document numérisé : ")
    image = cv2.imread(chemin_document)


    # Extract text from document
    text_extr= pytesseract.image_to_string(image, lang='ara')

    # Display extracted text
    print("\nTexte extrait du document :")
    print(text_extr)

    # Extract caractrs from text
    carac_extrait = caractéristiques_extraites(text_extr)



if __name__ == "__main__":
    main()

